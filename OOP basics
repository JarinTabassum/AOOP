Suppose your client want from you to get a cricket academy management system. By using the system your client will be able to manage the activities of the academy easily.
Create a class named PlayerInfo inside of the player package. PlayerInfo class should havepName, pId, pBalance and pExperience instance varaiables. Your client wants to keep pBalance
and pExperience private. There should be some methods to get and set(parameterized) the valuesof those private variables. PlayerInfo does also have a constructor with four parameters to initialize
the instance variables. PlayerInfo also have few methods updateId and updateName()(parameterized). There should be also a non-parameterized play() method which will reduce the
pBalance by 100 and increase the pExperience by 5 if the paly() get called and the player has sufficient balance.


package player;

public class PlayerInfo {
    public String pName;
    public int pId;
    private double pBalance;
    private int pExp;

    public PlayerInfo(String pName,int pId,double pBalance,int pExp){
        this.pName=pName;
        this.pId=pId;
        this.pBalance=pBalance;
        this.pExp=pExp;
    }

    public double getpBalance(){
        return pBalance;
    }
    void setpBalance(double pBalance){
        this.pBalance=pBalance;
    }

    public int getpExp(){
        return pExp;
    }
    void setpExp(int pExp){
        this.pExp=pExp;
    }

    public void updateID(int pId){
        this.pId=pId;
    }

    public void updateName(String pName){
        this.pName=pName;
    }

    public void play(){
        if(pBalance>=100){
            pBalance-=100;
            pExp+=5;
        }
        else{
            System.out.println("Not sufficient balance available");
        }
    }
}

//if i created the main class inside the package then would have written (package player; )
import player.PlayerInfo; //here we created a class outside the package

public class Maibn_player {
    public static void main(String[] args) {
        // Creating a player object
        PlayerInfo player1 = new PlayerInfo("John Doe", 101, 500, 10);

        // Displaying initial values
        System.out.println("Player Name: " + player1.pName);



Create another class named PlayerInfoV2 that inherits/extends the PlayerInfo class.  PlayerInfoV2 also have the non-parameterized play() method which will reduce the pBalance by
150 and increase the pExperience by 10 if the paly() get called and the player has sufficient balance using an array.

  package player;

public class PlayerInfoV2 extends PlayerInfo{
    public PlayerInfoV2(String pName,int pId,double pBalance,int pExp){ //need to make it public
        super(pName,pId,pBalance,pExp); //constructor using super
    }

    public void play(){
        if(getpBalance()>=150){
            setpBalance(getpBalance()-150);
            setpExp(getpExp()+10);
            System.out.println("The new balance and experience:"+getpBalance()+" "+getpExp());
        }
        else{
            System.out.println("Dont have sufficient balance");
        }
    }
}

//main (outside of package)
import player.PlayerInfoV2;
import java.util.Scanner;
public class main_player2 {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the number of players:");
        int n=sc.nextInt();

        PlayerInfoV2[] players=new PlayerInfoV2[n];

        for(int i=0; i<n; i++){
            System.out.println("Enter the player name:");
            String name=sc.next();
            System.out.println("ID:");
            int id=sc.nextInt();
            System.out.println("Balance:");
            double balance=sc.nextDouble();
            System.out.println("Experience:");
            int exp=sc.nextInt();

            players[i]=new PlayerInfoV2(name,id,balance,exp);
        }

        for(PlayerInfoV2 p: players ){
            p.play();
        }

//public static void findSecondHighestSalary(Employee[] employees) {
        double maxSalary = Double.MIN_VALUE;
        double secondMaxSalary = Double.MIN_VALUE;

        Employee secondHighestEmployee = null;

        for (Employee emp : employees) {
            if (emp.salary > maxSalary) {
                secondMaxSalary = maxSalary;
                maxSalary = emp.salary;
            } else if (emp.salary > secondMaxSalary && emp.salary < maxSalary) {
                secondMaxSalary = emp.salary;
                secondHighestEmployee = emp;
            }
        }

        if (secondHighestEmployee != null) {
            System.out.println("Second highest salary: " + secondHighestEmployee.salary + " (Employee: " + secondHighestEmployee.name + ")");
        } else {
            System.out.println("No second highest salary found.");
        }
    }
//
    }
}



Write your code step by step according to the following instructions.
Create an abstract class Chef.java. It will contain the following elements:

● Four variables: ○ name -> a string ○ age -> an integer ○ skill_level -> a string (“Good”/“Average”/“Poor”) ○ salary -> a float number indicating the salary in USD
● Two constructor methods: ○ Default constructor with no parameters  ○ Another constructor with 4 parameters for initialization
● Two concrete functions: ○ printChefInfo() -> This function will print the four variables in the format shown below.

Name of the chef: John, Age: 41, Skill level: Average, Salary: 102.50 USD
○ upgradeSkill() -> If this function is called, the skill_level of the chef will get one level higher than the current one.
Current Skill Level Upgraded Skill Level
Poor Average
Average Good
Good Good

● One abstract function: ○ cookDish(): No definition required here

Now, create a class called PizzaChef.java which is a subclass of Chef. It will- ● define a constructor with 4 parameters. Use the super() method inside the
constructor for initialization through the parent class. ● override cookDish() method. Inside the method, print this:

Chef XXXX is now cooking pizza!!!
[Here XXXX will be replaced by the chef’s name]. Example: Chef Robert is now cooking pizza!!!

Finally, create a class called TestChefs.java which will contain the main() method. In the main(),
create an instance of PizzaChef. Call and test all the available methods on the instance.

abstract class chef {
    String name;
    int age;
    String skill_level;
    float salary;

    public chef(){

    }

    public chef(String name,int age,String skill_level,float salary){
        this.name=name;
        this.age=age;
        this.skill_level=skill_level;
        this.salary=salary;
    }

    public void printChefInfo(){
        System.out.println("Name: "+name+" Age: "+age+" Skill level: "+skill_level+" Salary: "+salary);
    }

    public void upgradeSkill(){
        if(skill_level=="Poor"){
            skill_level="Average";
        } else if(skill_level == "Average"){
            skill_level="good";
        } else {
            skill_level="Good";
        }
    }

    abstract void cookDish();
}

............................................................................................................

class PizzaChef extends chef{
    PizzaChef(String name,int age,String skill_level,float salary){
        super(name, age, skill_level, salary);
    }

    @Override
    void cookDish() {
        System.out.println("Chef " + name + " is now cooking pizza!!!");
    }
}

............................................................................................................
public class TestChefs {
    public static void main(String[] args) {
        PizzaChef p1=new PizzaChef("Robert",35,"Good",50000);
        p1.printChefInfo();
        p1.upgradeSkill();
        p1.printChefInfo();
        p1.cookDish();
    }
}


//import java.util.Scanner;

public class main_member {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter name:");
        String empName=sc.nextLine();
        System.out.println(("Enter age:"));
        int empAge=sc.nextInt();
        System.out.println("Enter phone number:");
        String emp_phone=sc.next();
        System.out.println("Enter address:");
        sc.nextLine();
        String emp_address=sc.nextLine();
        System.out.println("Enter salary:");
        double emp_salary=sc.nextDouble();
        System.out.println("Enter specialization:");
        String emp_sp=sc.next();

        Employee e=new Employee(empName,empAge,emp_phone,emp_address,emp_salary,emp_sp);

        System.out.println("Enter name:");
        sc.nextLine();
        String manName=sc.nextLine();
        System.out.println(("Enter age:"));
        int manAge=sc.nextInt();
        System.out.println("Enter phone number:");
        String man_phone=sc.next();
        System.out.println("Enter address:");
        sc.nextLine();
        String man_address=sc.nextLine();
        System.out.println("Enter salary:");
        double man_salary=sc.nextDouble();
        System.out.println("Enter department:");
        String man_dp=sc.next();

        Manager m=new Manager(manName,manAge,man_phone,man_address,man_salary,man_dp);

        Member[] members={e,m};
        System.out.println("Displaying employee info:");
        e.printInfo();
        e.printInfo2();

        System.out.println("Displaying manager info:");
        m.printInfo();
        m.printInfo2();
    }
}
